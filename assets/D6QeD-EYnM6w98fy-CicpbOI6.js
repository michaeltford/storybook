/**
 * @license @sheetxl/sdk - SDK - A high-performance, embeddable spreadsheet engine. - v0.6.6
 *
 * (C) 2025-present SheetXL Inc. & Michael T. Ford
 * License: The license can be found at https://www.sheetxl.com/license.
 */const e={AND:{s:"Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE",p:{logical:{d:"logical1,logical2,... are 1 to 255 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references"}}},BYCOL:{s:"Applies a LAMBDA function to each column and returns an array of the results.",p:{array:{d:"is an array to be separated by column"},fn:{d:"is a LAMBDA that is called to scan the array.  The LAMBDA takes two parameters, accumulator and value."}},h:"Unimplemented"},BYROW:{s:"Applies a LAMBDA function to each row and returns an array of the results.",p:{array:{d:"is an array to be separated by column"},fn:{d:"is a LAMBDA that is called to scan the array.  The LAMBDA takes two parameters, accumulator and value."}},h:"Unimplemented"},FALSE:{s:"Returns the logical value FALSE",p:{}},IF:{s:"Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE",p:{logicalTest:{d:"is any value or expression that can be evaluated to TRUE or FALSE"},valueIfTrue:{d:"is the value that is returned if Logical_test is TRUE. If omitted, TRUE is returned. You can nest up to seven IF functions"},valueIfFalse:{d:"is the value that is returned if Logical_test is FALSE. If omitted, FALSE is returned"}}},IFERROR:{s:"Returns value_if_error if expression is an error and the value of the expression itself otherwise",p:{value:{d:"is any value or expression or reference"},valueIfError:{d:"is any value or expression or reference"}}},IFNA:{s:"Returns the value you specify if the expression resolves to #N/A, otherwise returns the result of the expression",p:{value:{d:"is any value or expression or reference"},valueIfError:{d:"is any value or expression or reference"}}},IFS:{s:"Checks whether one or more conditions are met and returns a value corresponding to the first TRUE condition",p:{logicalTest:{d:"logical_test1,logical_test2,... is any value or expression that can be evaluated to TRUE or FALSE"},logicalTrue:{d:"value_if_true1,value_if_true2,... is the value returned if Logical_test is TRUE"},rest:{}}},LAMDA:{s:"Creates a function value with can be called within formulas.",p:{parameterOrCalculation:{d:"a parameter or a calculation that returns a value. If a parameter, it must be the last argument."}},h:"Unimplemented"},LET:{s:"Assigns calculation results to names. Useful for storing intermediate calculations and values by defining names inside a formula. These names only apply within the scope of the LET function.",p:{name:{d:"name1,name2,... the name, or a calculation which can make use of all names within the LET. Names must start with a letter, cannot be the output of a formula, or conflict with range syntax."},nameOrValue:{d:"name_value1,name_value2,... the value associated with the name."},calculationOrName:{},rest:{}},h:"Unimplemented"},MAKEARRAY:{s:"Returns a calculated array of a specified row and column size, by applying a LAMBDA function.",p:{rows:{d:"is the number of rows in the array.  Must be greater than zero."},columns:{d:"is the number of columns in the array.  Must be greater than zero."},fn:{d:"is a LAMBDA that is called to create the array.  The LAMBDA takes two parameters, row index and column index."}},h:"Unimplemented"},MAP:{s:"Returns an array formed by 'mapping' each value in the array(s) to a new value by applying a lambda to create a new value.",p:{array:{d:"is an array to be mapped"},lamdaOrArray:{d:"lambda_or_array1,lambda_or_array2,... is a LAMBDA which must be the last argument and must have a parameter for each array passed, or another array to be mapped"}},h:"Unimplemented"},NOT:{s:"Changes FALSE to TRUE, or TRUE to FALSE",p:{logical:{d:"is a value or expression that can be evaluated to TRUE or FALSE"}}},OR:{s:"Checks whether any of the arguments are TRUE, and returns TRUE or FALSE. Returns FALSE only if all arguments are FALSE",p:{logical:{d:"logical1,logical2,... are 1 to 255 conditions that you want to test that can be either TRUE or FALSE"}}},REDUCE:{s:"Reduces an array to an accumulated value by applying a LAMBDA function to each value and returning the total value in the accumulator.",p:{initialValue:{d:"is the starting value for the accumulator"},array:{d:"is an array to be reduced"},fn:{d:"is a LAMBDA that is called to reduce the array.  The LAMBDA takes two parameters, accumulator and value."}},h:"Unimplemented"},SCAN:{s:"Scans an array by applying a LAMBDA function to each value and returns an array that has each intermediate value",p:{initialValue:{d:"is the starting value for the accumulator"},array:{d:"is an array to be reduced"},fn:{d:"is a LAMBDA that is called to reduce the array.  The LAMBDA takes two parameters, accumulator and value."}},h:"Unimplemented"},SWITCH:{s:"Evaluates an expression against a list of values and returns the result corresponding to the first matching value. If there is no match, an optional default value is returned",p:{expression:{},value:{d:"is an expression to be evaluated"},results:{d:"result1,result2,... is a result to be returned if the corresponding value matches expression"}},h:"Unimplemented"},TRUE:{s:"Returns the logical value TRUE",p:{}},XOR:{s:"Returns a logical 'Exclusive Or' of all arguments",p:{logical:{d:"logical1,logical2,... are 1 to 254 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references"}}}};export{e as default};
